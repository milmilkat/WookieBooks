using Microsoft.AspNetCore.Mvc;
using Moq;
using System;
using System.Threading.Tasks;
using WookieBooks.Controllers;
using WookieBooks.Models.Dtos;
using WookieBooks.Services.Interfaces;
using Xunit;

namespace WookieBooks.Services.Test
{
    public class BooksControllerTest
    {
        private BooksController _booksController;
        private Mock<IBookService> _mockBookService = new Mock<IBookService>();

        public BooksControllerTest()
        {
            _booksController = new BooksController(_mockBookService.Object);
        }

        [Fact]
        public async Task Get_Test()
        {
            var cSharpBookStringBytes = "";

            AuthorDto author = new AuthorDto
            {
                Id = 1,
                Name = "Author1"
            };
            BookDto book = new BookDto
            {
                Author = author,
                AuthorId = author.Id,
                CoverImage = Convert.FromBase64String(cSharpBookStringBytes),
                Description = "A book about C#",
                Price = 20,
                Title = "C# book"
            };

            int bookId = 1;

            _mockBookService.Setup(x => x.AddAsync(book)).ReturnsAsync(bookId);

            var result = await _booksController.AddAsync(book);

            Assert.IsAssignableFrom<ActionResult<int>>(result);
            Assert.Equal(1, bookId);
        }
    }
}
